local Notification = {}
Notification.__index = Notification

local ts = game:GetService("TweenService")
local ss = game:GetService("SoundService")
local txtS = game:GetService("TextService")

local notifications = Instance.new("ScreenGui")
local notifsHolderFrame = Instance.new("Frame")
local notifHolderListLayout = Instance.new("UIListLayout")

local errorTemplate = Instance.new("Frame")
local infoTemplate = Instance.new("Frame")
local messageTemplate = Instance.new("Frame")
local successTemplate = Instance.new("Frame")
local warningTemplate = Instance.new("Frame")
local yesNoTemplate = Instance.new("Frame")

local previousUiExists = game:GetService("CoreGui"):FindFirstChild("ImguiNotifications")
if previousUiExists then previousUiExists:Destroy() end

notifications.Name = "ImguiNotifications"
notifications.Parent = game:GetService("CoreGui")
notifications.ZIndexBehavior = Enum.ZIndexBehavior.Global
notifications.ResetOnSpawn = false

notifsHolderFrame.Name = "notifsHolderFrame"
notifsHolderFrame.Parent = notifications
notifsHolderFrame.AnchorPoint = Vector2.new(0, 1)
notifsHolderFrame.BackgroundTransparency = 1
notifsHolderFrame.BorderSizePixel = 0
notifsHolderFrame.ClipsDescendants = true
notifsHolderFrame.Position = UDim2.new(0, 20, 1, -75)
notifsHolderFrame.Size = UDim2.fromScale(0.25, 0.5)

notifHolderListLayout.Name = "notifHolderListLayout"
notifHolderListLayout.Parent = notifsHolderFrame
notifHolderListLayout.SortOrder = Enum.SortOrder.LayoutOrder
notifHolderListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
notifHolderListLayout.VerticalAlignment = Enum.VerticalAlignment.Bottom
notifHolderListLayout.Padding = UDim.new(0, 5)

local function createTemplate(name, accentColor, iconText)
    local template = Instance.new("Frame")
    template.Name = name
    template.AnchorPoint = Vector2.new(0, 0)
    template.BackgroundTransparency = 1
    template.Size = UDim2.new(1, 0, 0, 70)
    
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Parent = template
    mainFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    mainFrame.Size = UDim2.new(1, 0, 1, 0)
    
    local border = Instance.new("UIStroke")
    border.Name = "Border"
    border.Parent = mainFrame
    border.Color = accentColor
    border.Thickness = 1
    
    local corner = Instance.new("UICorner")
    corner.Name = "Corner"
    corner.Parent = mainFrame
    corner.CornerRadius = UDim.new(0, 4)
    
    local titleBar = Instance.new("Frame")
    titleBar.Name = "TitleBar"
    titleBar.Parent = mainFrame
    titleBar.BackgroundColor3 = accentColor
    titleBar.Size = UDim2.new(1, 0, 0, 18)
    
    local titleCorner = Instance.new("UICorner")
    titleCorner.Name = "TitleCorner"
    titleCorner.Parent = titleBar
    titleCorner.CornerRadius = UDim.new(0, 4)
    
    local cornerFix = Instance.new("Frame")
    cornerFix.Name = "CornerFix"
    cornerFix.Parent = titleBar
    cornerFix.BackgroundColor3 = accentColor
    cornerFix.BorderSizePixel = 0
    cornerFix.Position = UDim2.new(0, 0, 0.5, 0)
    cornerFix.Size = UDim2.new(1, 0, 0.5, 0)
    
    local titleText = Instance.new("TextLabel")
    titleText.Name = "TitleText"
    titleText.Parent = titleBar
    titleText.BackgroundTransparency = 1
    titleText.Position = UDim2.new(0, 5, 0, 0)
    titleText.Size = UDim2.new(1, -50, 1, 0)
    titleText.Font = Enum.Font.SourceSansBold
    titleText.Text = name:upper()
    titleText.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleText.TextSize = 14
    titleText.TextXAlignment = Enum.TextXAlignment.Left
    
    local icon = Instance.new("TextLabel")
    icon.Name = "Icon"
    icon.Parent = mainFrame
    icon.BackgroundTransparency = 1
    icon.Position = UDim2.new(0, 5, 0, 22)
    icon.Size = UDim2.new(0, 20, 0, 20)
    icon.Font = Enum.Font.SourceSansBold
    icon.Text = iconText
    icon.TextColor3 = accentColor
    icon.TextSize = 16
    
    local messageFrame = Instance.new("Frame")
    messageFrame.Name = "MessageFrame"
    messageFrame.Parent = mainFrame
    messageFrame.BackgroundTransparency = 1
    messageFrame.Position = UDim2.new(0, 30, 0, 20)
    messageFrame.Size = UDim2.new(1, -88, 0, 48)
    
    local headingText = Instance.new("TextLabel")
    headingText.Name = "Heading"
    headingText.Parent = messageFrame
    headingText.BackgroundTransparency = 1
    headingText.Size = UDim2.new(1, 0, 0, 16)
    headingText.Font = Enum.Font.SourceSansBold
    headingText.Text = "" -- Changed to empty string
    headingText.TextColor3 = Color3.fromRGB(220, 220, 220)
    headingText.TextSize = 14
    headingText.TextXAlignment = Enum.TextXAlignment.Left
    
    local bodyText = Instance.new("TextLabel")
    bodyText.Name = "Body"
    bodyText.Parent = messageFrame
    bodyText.BackgroundTransparency = 1
    bodyText.Position = UDim2.new(0, 0, 0, 18)
    bodyText.Size = UDim2.new(1, 0, 0, 30)
    bodyText.Font = Enum.Font.SourceSans
    bodyText.Text = "" -- Changed to empty string
    bodyText.TextColor3 = Color3.fromRGB(190, 190, 190)
    bodyText.TextSize = 14
    bodyText.TextWrapped = true
    bodyText.TextXAlignment = Enum.TextXAlignment.Left
    bodyText.TextYAlignment = Enum.TextYAlignment.Top
    
    local buttonFrame = Instance.new("Frame")
    buttonFrame.Name = "ButtonFrame"
    buttonFrame.Parent = mainFrame
    buttonFrame.BackgroundTransparency = 1
    buttonFrame.Position = UDim2.new(1, -55, 0, 23)
    buttonFrame.Size = UDim2.new(0, 50, 0, 44)
    
    local function createButton(name, position, text)
        local button = Instance.new("TextButton")
        button.Name = name
        button.Parent = buttonFrame
        button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        button.BorderColor3 = accentColor
        button.BorderSizePixel = 1
        button.Position = position
        button.Size = UDim2.new(0, 45, 0, 20)
        button.Font = Enum.Font.SourceSans
        button.Text = text
        button.TextColor3 = Color3.fromRGB(220, 220, 220)
        button.TextSize = 14
        
        local buttonCorner = Instance.new("UICorner")
        buttonCorner.Parent = button
        buttonCorner.CornerRadius = UDim.new(0, 3)
        
        button.MouseEnter:Connect(function()
            ts:Create(button, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(60, 60, 60)}):Play()
        end)
        
        button.MouseLeave:Connect(function()
            ts:Create(button, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(50, 50, 50)}):Play()
        end)
        
        return button
    end
    
    local okButton = createButton("OkButton", UDim2.new(0, 0, 0, 0), "OK")
    local closeButton = createButton("CloseButton", UDim2.new(0, 0, 0, 23), "X")
    
    if name == "yesno" then
        okButton.Text = "Yes"
        closeButton.Text = "No"
        closeButton.Position = UDim2.new(0, 0, 0, 23)
    end
    
    return template
end

errorTemplate = createTemplate("error", Color3.fromRGB(220, 70, 70), "✗")
infoTemplate = createTemplate("info", Color3.fromRGB(70, 140, 220), "ⓘ")
messageTemplate = createTemplate("message", Color3.fromRGB(130, 130, 140), "➤")
successTemplate = createTemplate("success", Color3.fromRGB(70, 200, 120), "✓")
warningTemplate = createTemplate("warning", Color3.fromRGB(220, 160, 40), "⚠")
yesNoTemplate = createTemplate("yesno", Color3.fromRGB(130, 100, 190), "?")

local function scaleNotifHolderMaxNotifs()
    local amountOfNotifsInFrame = math.floor(notifsHolderFrame.AbsoluteSize.Y/75)
    local notifsHolderFramePadding = amountOfNotifsInFrame * notifHolderListLayout.Padding.Offset
    notifsHolderFrame.Size = UDim2.new(.25, 0, 0, amountOfNotifsInFrame * 75 + notifsHolderFramePadding)
end

local function deleteNotifsOutsideFrame()
    if notifHolderListLayout.AbsoluteContentSize.Y < notifsHolderFrame.AbsoluteSize.Y then return end
    for _, notif in pairs(notifsHolderFrame:GetChildren()) do
        if not notif:IsA("Frame") then continue end
        if notif.AbsolutePosition.Y > notifsHolderFrame.AbsolutePosition.Y then continue end
        notif:Destroy()
    end
end

function Notification.new(notifType, heading, body, options)
    local defaultOptions = {
        autoRemove = false,
        autoRemoveTime = 5,
        showOk = true,
        showClose = true,
        callback = nil,
        yesCallback = nil,
        noCallback = nil
    }
    
    options = options or {}
    for k, v in pairs(defaultOptions) do
        if options[k] == nil then
            options[k] = v
        end
    end

    local notificationTypes = {
        ["error"] = errorTemplate,
        ["info"] = infoTemplate,
        ["message"] = messageTemplate,
        ["success"] = successTemplate,
        ["warning"] = warningTemplate,
        ["yesno"] = yesNoTemplate,
        ["confirm"] = yesNoTemplate
    }

    local notif = notificationTypes[notifType:lower()]
    assert(notif, "Notification type not valid\nValid Types: {\n\tError\n\tInfo\n\tMessage\n\tSuccess\n\tWarning\n\tYesNo\n\tConfirm\n}")
    notif = notif:Clone()
    notif.MainFrame.Position = UDim2.new(-1, 0, 0, 0) -- Initial position off-screen to the left

    local function closeNotif()
        coroutine.wrap(function()
            local closeTween = ts:Create(notif.MainFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {Position = UDim2.new(-1, 0, 0, 0)}) -- Animate off to the left
            closeTween:Play()
            closeTween.Completed:Wait()
            notif:Destroy()
        end)()
    end

    local okButton = notif.MainFrame.ButtonFrame.OkButton
    local closeButton = notif.MainFrame.ButtonFrame.CloseButton
    
    if notifType:lower() == "yesno" or notifType:lower() == "confirm" then
        okButton.Visible = true
        closeButton.Visible = true
        
        okButton.MouseButton1Click:Connect(function()
            if options.yesCallback then
                options.yesCallback()
            end
            closeNotif()
        end)
        
        closeButton.MouseButton1Click:Connect(function()
            if options.noCallback then
                options.noCallback()
            end
            closeNotif()
        end)
    else
        okButton.Visible = options.showOk
        closeButton.Visible = options.showClose
        
        if options.showOk then
            okButton.MouseButton1Click:Connect(function()
                if options.callback then
                    options.callback()
                end
                closeNotif()
            end)
        end
        
        if options.showClose then
            closeButton.MouseButton1Click:Connect(function()
                closeNotif()
            end)
        end
    end

    notif.Parent = notifsHolderFrame
    
    ts:Create(notif.MainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Position = UDim2.new(0, 0, 0, 0)}):Play() -- Animate in from the left
    
    if options.autoRemove and notifType:lower() ~= "yesno" and notifType:lower() ~= "confirm" then
        task.delay(options.autoRemoveTime, function()
            if notif and notif:FindFirstChild("MainFrame") then
                closeNotif()
            end
        end)
    end

    local newNotif = setmetatable({}, Notification)
    newNotif.Instance = notif
    newNotif.Instance.MainFrame.MessageFrame.Heading.Text = heading or ""
    newNotif.Instance.MainFrame.MessageFrame.Body.Text = body or ""
    newNotif.Instance.MainFrame.TitleBar.TitleText.Text = string.upper(notifType == "yesno" and "CONFIRM" or notifType)
    newNotif.Heading = heading
    newNotif.Body = body
    newNotif.Type = notifType:lower()
    newNotif.Options = options
    newNotif.close = closeNotif

    return newNotif
end

function Notification:changeHeading(newHeading)
    if not self.Instance or not self.Instance:FindFirstChild("MainFrame") then return end
    self.Instance.MainFrame.MessageFrame.Heading.Text = newHeading
    self.Heading = newHeading
end

function Notification:changeBody(newBody)
    if not self.Instance or not self.Instance:FindFirstChild("MainFrame") then return end
    self.Instance.MainFrame.MessageFrame.Body.Text = newBody
    self.Body = newBody
end

function Notification:deleteTimeout(waitTime)
    if not self.Instance or not self.Instance:FindFirstChild("MainFrame") then return end
    
    task.delay(waitTime or 3, function()
        if self.Instance and self.Instance:FindFirstChild("MainFrame") then
            self.close()
        end
    end)
end

function Notification:delete()
    if not self.Instance or not self.Instance:FindFirstChild("MainFrame") then return end
    self.close()
end

function Notification:changeColor(primary, secondary, textColor)
    if not self.Instance or not self.Instance:FindFirstChild("MainFrame") then return end
    
    if primary then
        self.Instance.MainFrame.BackgroundColor3 = primary
    end

    if secondary then
        local mainFrame = self.Instance.MainFrame
        mainFrame.TitleBar.BackgroundColor3 = secondary
        mainFrame.TitleBar.CornerFix.BackgroundColor3 = secondary
        mainFrame.Icon.TextColor3 = secondary
        mainFrame.Border.Color = secondary
        
        mainFrame.ButtonFrame.OkButton.BorderColor3 = secondary
        mainFrame.ButtonFrame.CloseButton.BorderColor3 = secondary
    end

    if textColor then
        local mainFrame = self.Instance.MainFrame
        mainFrame.MessageFrame.Heading.TextColor3 = textColor
        mainFrame.MessageFrame.Body.TextColor3 = textColor
    end
end

function Notification:setButtonVisibility(showOk, showClose)
    if not self.Instance or not self.Instance:FindFirstChild("MainFrame") then return end
    
    self.Instance.MainFrame.ButtonFrame.OkButton.Visible = showOk
    self.Instance.MainFrame.ButtonFrame.CloseButton.Visible = showClose
    
    self.Options.showOk = showOk
    self.Options.showClose = showClose
end

scaleNotifHolderMaxNotifs()
notifHolderListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(deleteNotifsOutsideFrame)

return Notification
